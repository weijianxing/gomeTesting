
about more Java process and thread you can reference 
http://www.ibm.com/developerworks/cn/java/j-lo-processthread/
进程与线程在程序开发中无疑占有极其重要的地位，而 Java 语言为了能提供统一的、与平台无关的关于进程和线程的编程接口，必然要对操作系统提供的相关功能做进一步封装。本文主要介绍 Java 中关于进程与线程的相关封装类，
揭示如何创建 Java 进程与线程，Java 封装类和实际的系统本地进程和线程是如何对应的，以及使用 Java 进程和线程的一些限制。
概述

进程与线程，本质意义上说， 是操作系统的调度单位，可以看成是一种操作系统 “资源” 。
Java 作为与平台无关的编程语言，必然会对底层（操作系统）提供的功能进行进一步的封装，以平台无关的编程接口供程序员使用，
进程与线程作为操作系统核心概念的一部分无疑亦是如此。在 Java 语言中，对进程和线程的封装，分别提供了 Process 和 Thread 相关的一些类。
本文首先简单的介绍如何使用这些类来创建进程和线程，然后着重介绍这些类是如何和操作系统本地进程线程相对应的，
给出了 Java 虚拟机对于这些封装类的概要性的实现；同时由于 Java 的封装也隐藏了底层的一些概念和可操作性，
本文还对 Java 进程线程和本地进程线程做了一些简单的比较，列出了使用 Java 进程、线程的一些限制和需要注意的问题。

JVM 对进程的实现

在 JDK 的代码中，只提供了 ProcessImpl 类来实现 Process 抽象类。其中引用了 native 的 create, close, waitfor, destory 和 exitValue 方法。
在 Java 中，native 方法是依赖于操作系统平台的本地方法，它的实现是用 C/C++ 等类似的底层语言实现。
我们可以在 JVM 的源代码中找到对应的本地方法，然后对其进行分析。JVM 对进程的实现相对比较简单，以 Windows 下的 JVM 为例。
在 JVM 中，将 Java 中调用方法时的传入的参数传递给操作系统对应的方法来实现相应的功能。
Java 进程与操作系统进程

通过上面对 Java 进程的分析，其实它在实现上就是创建了操作系统的一个进程，也就是每个 JVM 中创建的进程都对应了操作系统中的一个进程。但是，Java 为了给用户更好的更方便的使用，向用户屏蔽了一些与平台相关的信息，这为用户需要使用的时候，带来了些许不便。

在使用 C/C++ 创建系统进程的时候，是可以获得进程的 PID 值的，可以直接通过该 PID 去操作相应进程。但是在 JAVA 中，用户只能通过实例的引用去进行操作，当该引用丢失或者无法取得的时候，就无法了解任何该进程的信息。

当然，Java 进程在使用的时候还有些要注意的事情：

    Java 提供的输入输出的管道容量是十分有限的，如果不及时读取会导致进程挂起甚至引起死锁。
    当创建进程去执行 Windows 下的系统命令时，如：dir、copy 等。需要运行 windows 的命令解释器，command.exe/cmd.exe，这依赖于 windows 的版本，这样才可以运行系统的命令。
    对于 Shell 中的管道 ‘ | ’命令，各平台下的重定向命令符 ‘ > ’，都无法通过命令参数直接传入进行实现，而需要在 Java 代码中做一些处理，如定义新的流来存储标准输出，等等问题。

总之，Java 中对操作系统的进程进行了封装，屏蔽了操作系统进程相关的信息。同时，在使用 Java 提供创建进程运行本地命令的时候，需要小心使用。

一般而言，使用进程是为了执行某项任务，而现代操作系统对于执行任务的计算资源的配置调度一般是以线程为对象
（早期的类 Unix 系统因为不支持线程，所以进程也是调度单位，但那是比较轻量级的进程，在此不做深入讨论）。
创建一个进程，操作系统实际上还是会为此创建相应的线程以运行一系列指令。特别地，当一个任务比较庞大复杂，
可能需要创建多个线程以实现逻辑上并发执行的时候，线程的作用更为明显。因而我们有必要深入了解 Java 中的线程，
以避免可能出现的问题。本文下面的内容即是呈现 Java 线程的创建方式以及它与操作系统线程的联系与区别。

